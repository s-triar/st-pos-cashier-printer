import { PrintBuilder } from './PrintBuilder';
// @ts-ignore
import { StarWebPrintBuilder } from '../js/StarWebPrintBuilder.mjs';
export class WebPrintBuilder extends PrintBuilder {
    constructor() {
        super();
        this.builder = new StarWebPrintBuilder();
    }
    init() {
        this.request += this.builder.createInitializationElement();
        return this;
    }
    setJustification(value = 'left') {
        this.request += this.builder.createAlignmentElement({ position: value });
        return this;
    }
    setBold(value = true) {
        this.request += this.builder.createTextElement({ emphasis: value });
        return this;
    }
    setUnderline(value = true) {
        this.request += this.builder.createTextElement({ underline: value });
        return this;
    }
    setInverse(value = true) {
        this.request += this.builder.createTextElement({ invert: value });
        return this;
    }
    writeLine(value) {
        this.request += this.builder.createTextElement({ data: `${value}\n` });
        return this;
    }
    setSize(size = 'normal') {
        let fontSize;
        switch (size) {
            case 'large':
                fontSize = 2;
                break;
            default:
                fontSize = 1;
                break;
        }
        this.request += this.builder.createTextElement({ width: fontSize, height: fontSize });
        return this;
    }
    cut(type = 'full') {
        this.request += this.builder.createCutPaperElement({ feed: true, type: type });
        return this;
    }
    feed(lines = 1) {
        this.request += this.builder.createFeedElement({ line: lines });
        return this;
    }
    flush() {
        return this.request;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2ViUHJpbnRCdWlsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcG9zLWNhc2hpZXItcHJpbnRlci9zcmMvbGliL2J1aWxkZXJzL1dlYlByaW50QnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsYUFBYTtBQUNiLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRXBFLE1BQU0sT0FBTyxlQUFnQixTQUFRLFlBQVk7SUFJN0M7UUFDSSxLQUFLLEVBQUUsQ0FBQztRQUpKLFlBQU8sR0FBUSxJQUFJLG1CQUFtQixFQUFFLENBQUM7SUFLakQsQ0FBQztJQUVNLElBQUk7UUFDUCxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsMkJBQTJCLEVBQUUsQ0FBQztRQUMzRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU0sZ0JBQWdCLENBQUMsUUFBZ0IsTUFBTTtRQUMxQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN6RSxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU0sT0FBTyxDQUFDLFFBQWlCLElBQUk7UUFDaEMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDcEUsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLFlBQVksQ0FBQyxRQUFpQixJQUFJO1FBQ3JDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3JFLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxVQUFVLENBQUMsUUFBaUIsSUFBSTtRQUNuQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNsRSxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU0sU0FBUyxDQUFDLEtBQWE7UUFDMUIsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZFLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxPQUFPLENBQUMsT0FBZSxRQUFRO1FBQ2xDLElBQUksUUFBUSxDQUFDO1FBQ2IsUUFBUSxJQUFJLEVBQUU7WUFDVixLQUFLLE9BQU87Z0JBQ1IsUUFBUSxHQUFHLENBQUMsQ0FBQztnQkFDYixNQUFNO1lBQ1Y7Z0JBQ0ksUUFBUSxHQUFHLENBQUMsQ0FBQztnQkFDYixNQUFNO1NBQ2I7UUFDRCxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ3RGLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxHQUFHLENBQUMsT0FBZSxNQUFNO1FBQzVCLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDL0UsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLElBQUksQ0FBQyxRQUFnQixDQUFDO1FBQ3pCLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ2hFLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxLQUFLO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3hCLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaW50QnVpbGRlciB9IGZyb20gJy4vUHJpbnRCdWlsZGVyJztcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgeyBTdGFyV2ViUHJpbnRCdWlsZGVyIH0gZnJvbSAnLi4vanMvU3RhcldlYlByaW50QnVpbGRlci5tanMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFdlYlByaW50QnVpbGRlciBleHRlbmRzIFByaW50QnVpbGRlciB7XHJcbiAgICBwcml2YXRlIGJ1aWxkZXI6IGFueSA9IG5ldyBTdGFyV2ViUHJpbnRCdWlsZGVyKCk7XHJcbiAgICBwcml2YXRlIHJlcXVlc3QhOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaW5pdCgpOiBXZWJQcmludEJ1aWxkZXIge1xyXG4gICAgICAgIHRoaXMucmVxdWVzdCArPSB0aGlzLmJ1aWxkZXIuY3JlYXRlSW5pdGlhbGl6YXRpb25FbGVtZW50KCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldEp1c3RpZmljYXRpb24odmFsdWU6IHN0cmluZyA9ICdsZWZ0Jyk6IFdlYlByaW50QnVpbGRlciB7XHJcbiAgICAgICAgdGhpcy5yZXF1ZXN0ICs9IHRoaXMuYnVpbGRlci5jcmVhdGVBbGlnbm1lbnRFbGVtZW50KHsgcG9zaXRpb246IHZhbHVlIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRCb2xkKHZhbHVlOiBib29sZWFuID0gdHJ1ZSk6IFdlYlByaW50QnVpbGRlciB7XHJcbiAgICAgICAgdGhpcy5yZXF1ZXN0ICs9IHRoaXMuYnVpbGRlci5jcmVhdGVUZXh0RWxlbWVudCh7IGVtcGhhc2lzOiB2YWx1ZSB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0VW5kZXJsaW5lKHZhbHVlOiBib29sZWFuID0gdHJ1ZSk6IFdlYlByaW50QnVpbGRlciB7XHJcbiAgICAgICAgdGhpcy5yZXF1ZXN0ICs9IHRoaXMuYnVpbGRlci5jcmVhdGVUZXh0RWxlbWVudCh7IHVuZGVybGluZTogdmFsdWUgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldEludmVyc2UodmFsdWU6IGJvb2xlYW4gPSB0cnVlKTogV2ViUHJpbnRCdWlsZGVyIHtcclxuICAgICAgICB0aGlzLnJlcXVlc3QgKz0gdGhpcy5idWlsZGVyLmNyZWF0ZVRleHRFbGVtZW50KHsgaW52ZXJ0OiB2YWx1ZSB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgd3JpdGVMaW5lKHZhbHVlOiBzdHJpbmcpOiBXZWJQcmludEJ1aWxkZXIge1xyXG4gICAgICAgIHRoaXMucmVxdWVzdCArPSB0aGlzLmJ1aWxkZXIuY3JlYXRlVGV4dEVsZW1lbnQoeyBkYXRhOiBgJHt2YWx1ZX1cXG5gIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRTaXplKHNpemU6IHN0cmluZyA9ICdub3JtYWwnKTogV2ViUHJpbnRCdWlsZGVyIHtcclxuICAgICAgICBsZXQgZm9udFNpemU7XHJcbiAgICAgICAgc3dpdGNoIChzaXplKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2xhcmdlJzpcclxuICAgICAgICAgICAgICAgIGZvbnRTaXplID0gMjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgZm9udFNpemUgPSAxO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVxdWVzdCArPSB0aGlzLmJ1aWxkZXIuY3JlYXRlVGV4dEVsZW1lbnQoeyB3aWR0aDogZm9udFNpemUsIGhlaWdodDogZm9udFNpemUgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGN1dCh0eXBlOiBzdHJpbmcgPSAnZnVsbCcpOiBXZWJQcmludEJ1aWxkZXIge1xyXG4gICAgICAgIHRoaXMucmVxdWVzdCArPSB0aGlzLmJ1aWxkZXIuY3JlYXRlQ3V0UGFwZXJFbGVtZW50KHsgZmVlZDogdHJ1ZSwgdHlwZTogdHlwZSB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZmVlZChsaW5lczogbnVtYmVyID0gMSk6IFdlYlByaW50QnVpbGRlciB7XHJcbiAgICAgICAgdGhpcy5yZXF1ZXN0ICs9IHRoaXMuYnVpbGRlci5jcmVhdGVGZWVkRWxlbWVudCh7IGxpbmU6IGxpbmVzIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBmbHVzaCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3Q7XHJcbiAgICB9XHJcbn0iXX0=