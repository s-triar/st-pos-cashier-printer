/// <reference types="web-bluetooth" />
// import { PrintDriver } from 'ng-thermal-print/lib/drivers/PrintDriver';
import { BehaviorSubject, Observable } from 'rxjs';
import { PrintDriver } from './PrintDriver';
export class BluetoothLowEnergyDriver extends PrintDriver {
    constructor(vendorId, productId) {
        super();
        this.isConnected = new BehaviorSubject(false);
        this.vendorId = vendorId;
        this.productId = productId;
    }
    convertStringToUUID(s) {
        s = s.toLowerCase();
        if (s.includes('-')) {
            return s;
        }
        else {
            let ss;
            if (s.substring(0, 2).includes('0x')) {
                ss = s.substring(2);
            }
            else {
                ss = s;
            }
            return parseInt(ss, 16);
        }
    }
    requestDevice(serviceUUID, characteristicUUID) {
        if (typeof serviceUUID === 'string') {
            serviceUUID = this.convertStringToUUID(serviceUUID);
        }
        if (typeof characteristicUUID === 'string') {
            characteristicUUID = this.convertStringToUUID(characteristicUUID);
        }
        const serviceUUIDs = [serviceUUID];
        const opt = { optionalServices: serviceUUIDs, acceptAllDevices: true };
        this.serviceUUID = serviceUUID;
        this.characteristicUUID = characteristicUUID;
        return new Observable(observer => {
            navigator.bluetooth.requestDevice(opt)
                .then((device) => {
                this.device = device;
                return observer.next(this.device);
            })
                .catch((error) => {
                return observer.error(error);
            });
        });
    }
    disconnect() {
        this.removeBluetoothConnections();
    }
    connect() {
        this.device.gatt?.connect()
            .then((server) => {
            return server.getPrimaryService(this.serviceUUID);
        })
            .then((service) => {
            return service.getCharacteristic(this.characteristicUUID);
        })
            .then((characteristic) => {
            this.isConnected.next(true);
            this.listenForBluetoothConnections();
            this.characteristic = characteristic;
        });
    }
    write(data) {
        const array_chunks = (array, chunkSize) => {
            const chunks = [];
            for (let i = 0, len = array.length; i < len; i += chunkSize) {
                chunks.push(array.slice(i, i + chunkSize));
            }
            return chunks;
        };
        const chunks = array_chunks(data, 20);
        let index = 1;
        for (const chunk of chunks) {
            setTimeout(() => {
                this.characteristic.writeValue(chunk);
            }, 100 + index * 100);
            index++;
        }
    }
    listenForBluetoothConnections() {
        navigator.bluetooth.addEventListener('disconnect', () => {
            this.isConnected.next(false);
        });
        navigator.bluetooth.addEventListener('connect', () => {
            this.isConnected.next(true);
        });
    }
    removeBluetoothConnections() {
        navigator.bluetooth.removeEventListener('disconnect', () => {
            this.isConnected.next(false);
        });
        navigator.bluetooth.removeEventListener('connect', () => {
            this.isConnected.next(false);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,