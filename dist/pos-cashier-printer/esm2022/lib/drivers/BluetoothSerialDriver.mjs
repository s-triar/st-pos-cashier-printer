/// <reference types="w3c-web-serial" />
import { BehaviorSubject, Observable } from 'rxjs';
import { PrintDriver } from './PrintDriver';
export class BluetoothSerialDriver extends PrintDriver {
    constructor(vendorId, productId) {
        super();
        this.isConnected = new BehaviorSubject(false);
        this.option = {
            baudRate: 9600
        };
        this.vendorId = vendorId;
        this.productId = productId;
    }
    requestPort() {
        return new Observable(observer => {
            navigator.serial.requestPort({ filters: [] })
                .then((result) => {
                this.port = result;
                return observer.next(result);
            })
                .catch((error) => {
                return observer.error(error);
            });
        });
    }
    setOpenOption(option) {
        this.option = { ...this.option, ...option };
    }
    disconnect() {
        // tslint:disable-next-line:no-non-null-assertion
        this.writer.releaseLock();
        this.port.close().then(x => this.removeSerialConnections());
    }
    connect() {
        navigator.serial.getPorts()
            .then((ports) => {
            return ports.find(x => x === this.port);
        })
            .then((p) => {
            return p?.open(this.option);
        })
            .then(() => {
            this.isConnected.next(true);
            this.listenForSerialConnections();
            this.writer = this.port.writable?.getWriter();
        })
            .catch((err) => {
            console.log(err);
            this.isConnected.next(false);
        });
    }
    async write(data) {
        // tslint:disable-next-line:no-non-null-assertion
        await this.writer.write(data);
    }
    listenForSerialConnections() {
        navigator.serial.addEventListener('disconnect', () => {
            this.isConnected.next(false);
        });
        navigator.serial.addEventListener('connect', () => {
            this.isConnected.next(true);
        });
    }
    removeSerialConnections() {
        navigator.serial.removeEventListener('disconnect', () => {
            this.isConnected.next(false);
        });
        navigator.serial.removeEventListener('connect', () => {
            this.isConnected.next(false);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmx1ZXRvb3RoU2VyaWFsRHJpdmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcG9zLWNhc2hpZXItcHJpbnRlci9zcmMvbGliL2RyaXZlcnMvQmx1ZXRvb3RoU2VyaWFsRHJpdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdDQUF3QztBQUV4QyxPQUFPLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRyxNQUFNLE1BQU0sQ0FBQztBQUNwRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTVDLE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxXQUFXO0lBU2xELFlBQVksUUFBaUIsRUFBRSxTQUFrQjtRQUM3QyxLQUFLLEVBQUUsQ0FBQztRQVRaLGdCQUFXLEdBQTZCLElBQUksZUFBZSxDQUFVLEtBQUssQ0FBQyxDQUFDO1FBSzVFLFdBQU0sR0FBa0I7WUFDcEIsUUFBUSxFQUFFLElBQUk7U0FDakIsQ0FBQztRQUlFLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0lBQy9CLENBQUM7SUFDRCxXQUFXO1FBQ1AsT0FBTyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUM3QixTQUFTLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQztpQkFDeEMsSUFBSSxDQUFDLENBQUMsTUFBa0IsRUFBRSxFQUFFO2dCQUN6QixJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQztnQkFDbkIsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2pDLENBQUMsQ0FBQztpQkFDRCxLQUFLLENBQUMsQ0FBQyxLQUFVLEVBQUUsRUFBRTtnQkFDbEIsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2pDLENBQUMsQ0FBQyxDQUFDO1FBQ1gsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ0QsYUFBYSxDQUFDLE1BQXFCO1FBQy9CLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxNQUFNLEVBQUMsQ0FBQztJQUM5QyxDQUFDO0lBQ0QsVUFBVTtRQUNOLGlEQUFpRDtRQUNqRCxJQUFJLENBQUMsTUFBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBQ0QsT0FBTztRQUNILFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO2FBQ3RCLElBQUksQ0FBQyxDQUFDLEtBQW1CLEVBQUUsRUFBRTtZQUMxQixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVDLENBQUMsQ0FBQzthQUNELElBQUksQ0FBQyxDQUFDLENBQXVCLEVBQUUsRUFBRTtZQUM5QixPQUFPLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2hDLENBQUMsQ0FBQzthQUNELElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDUCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM1QixJQUFJLENBQUMsMEJBQTBCLEVBQUUsQ0FBQztZQUNsQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxDQUFDO1FBQ2xELENBQUMsQ0FBQzthQUNELEtBQUssQ0FBQyxDQUFDLEdBQVEsRUFBRSxFQUFFO1lBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDakIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakMsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBQ00sS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFnQjtRQUMvQixpREFBaUQ7UUFDakQsTUFBTSxJQUFJLENBQUMsTUFBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBQ08sMEJBQTBCO1FBQzlCLFNBQVMsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRTtZQUNqRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztRQUNILFNBQVMsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRTtZQUM5QyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFDTyx1QkFBdUI7UUFDM0IsU0FBUyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFO1lBQ3BELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsU0FBUyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO1lBQ2pELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJ3M2Mtd2ViLXNlcmlhbFwiIC8+XHJcblxyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFByaW50RHJpdmVyIH0gZnJvbSAnLi9QcmludERyaXZlcic7XHJcblxyXG5leHBvcnQgY2xhc3MgQmx1ZXRvb3RoU2VyaWFsRHJpdmVyIGV4dGVuZHMgUHJpbnREcml2ZXJ7XHJcbiAgICBpc0Nvbm5lY3RlZDogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPihmYWxzZSk7XHJcbiAgICBwb3J0ITogU2VyaWFsUG9ydDtcclxuICAgIHdyaXRlciE6IGFueTtcclxuICAgIHByaXZhdGUgdmVuZG9ySWQ6IG51bWJlciB8IHVuZGVmaW5lZDtcclxuICAgIHByaXZhdGUgcHJvZHVjdElkOiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcbiAgICBvcHRpb246IFNlcmlhbE9wdGlvbnMgPSB7XHJcbiAgICAgICAgYmF1ZFJhdGU6IDk2MDBcclxuICAgIH07XHJcbiAgICBjb25zdHJ1Y3Rvcih2ZW5kb3JJZD86IG51bWJlciwgcHJvZHVjdElkPzogbnVtYmVyKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuXHJcbiAgICAgICAgdGhpcy52ZW5kb3JJZCA9IHZlbmRvcklkO1xyXG4gICAgICAgIHRoaXMucHJvZHVjdElkID0gcHJvZHVjdElkO1xyXG4gICAgfVxyXG4gICAgcmVxdWVzdFBvcnQoKTogT2JzZXJ2YWJsZTxTZXJpYWxQb3J0PntcclxuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUob2JzZXJ2ZXIgPT4ge1xyXG4gICAgICAgICAgICBuYXZpZ2F0b3Iuc2VyaWFsLnJlcXVlc3RQb3J0KHsgZmlsdGVyczogW10gfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKChyZXN1bHQ6IFNlcmlhbFBvcnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcnQgPSByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9ic2VydmVyLm5leHQocmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JzZXJ2ZXIuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBzZXRPcGVuT3B0aW9uKG9wdGlvbjogU2VyaWFsT3B0aW9ucyk6IHZvaWR7XHJcbiAgICAgICAgdGhpcy5vcHRpb24gPSB7Li4udGhpcy5vcHRpb24sIC4uLm9wdGlvbn07XHJcbiAgICB9XHJcbiAgICBkaXNjb25uZWN0KCk6IHZvaWR7XHJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLW5vbi1udWxsLWFzc2VydGlvblxyXG4gICAgICAgIHRoaXMud3JpdGVyIS5yZWxlYXNlTG9jaygpO1xyXG4gICAgICAgIHRoaXMucG9ydC5jbG9zZSgpLnRoZW4oeCA9PiB0aGlzLnJlbW92ZVNlcmlhbENvbm5lY3Rpb25zKCkpO1xyXG4gICAgfVxyXG4gICAgY29ubmVjdCgpOiB2b2lkIHtcclxuICAgICAgICBuYXZpZ2F0b3Iuc2VyaWFsLmdldFBvcnRzKClcclxuICAgICAgICAgICAgLnRoZW4oKHBvcnRzOiBTZXJpYWxQb3J0W10pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwb3J0cy5maW5kKHggPT4geCA9PT0gdGhpcy5wb3J0KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oKHA6IFNlcmlhbFBvcnR8dW5kZWZpbmVkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcD8ub3Blbih0aGlzLm9wdGlvbik7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNDb25uZWN0ZWQubmV4dCh0cnVlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuRm9yU2VyaWFsQ29ubmVjdGlvbnMoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMud3JpdGVyID0gdGhpcy5wb3J0LndyaXRhYmxlPy5nZXRXcml0ZXIoKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKChlcnI6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNDb25uZWN0ZWQubmV4dChmYWxzZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGFzeW5jIHdyaXRlKGRhdGE6IFVpbnQ4QXJyYXkpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tbm9uLW51bGwtYXNzZXJ0aW9uXHJcbiAgICAgICAgYXdhaXQgdGhpcy53cml0ZXIhLndyaXRlKGRhdGEpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBsaXN0ZW5Gb3JTZXJpYWxDb25uZWN0aW9ucygpOiB2b2lkIHtcclxuICAgICAgICBuYXZpZ2F0b3Iuc2VyaWFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Rpc2Nvbm5lY3QnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNDb25uZWN0ZWQubmV4dChmYWxzZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbmF2aWdhdG9yLnNlcmlhbC5hZGRFdmVudExpc3RlbmVyKCdjb25uZWN0JywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmlzQ29ubmVjdGVkLm5leHQodHJ1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIHJlbW92ZVNlcmlhbENvbm5lY3Rpb25zKCk6IHZvaWR7XHJcbiAgICAgICAgbmF2aWdhdG9yLnNlcmlhbC5yZW1vdmVFdmVudExpc3RlbmVyKCdkaXNjb25uZWN0JywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmlzQ29ubmVjdGVkLm5leHQoZmFsc2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIG5hdmlnYXRvci5zZXJpYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29ubmVjdCcsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5pc0Nvbm5lY3RlZC5uZXh0KGZhbHNlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSJdfQ==